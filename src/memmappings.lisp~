;;;; This file is to organize all the functions which access the memory mappings of the current process

;; [X] removed comparison and parsing function from get-memory-regions function
;; --- made a macro to specifically target the heap from a process

;; Make function to iterate over each address and scan for a target value,
;; any result will be a signed

;; Make a function to calculate the displacement of a certain address from the start of the program
;;   and save it to a file
;; e.g., calculate the displacement for a health variable

(in-package :cl-ptrace)

(defun num-addresses (&optional (pid *pid*))
  "Sums the amount of addresses used by the process"
  (let ((mappings (get-memory-regions pid)))
    (apply #'+ (loop for range in mappings
	  collect (- (second range) (first range))))))

(defmacro get-heap-region (&optional (pid *pid*))
  "Parses the memory regions of the process and returns the memory region of the heap"
  `(car (get-memory-regions ,pid #'parse-memory-regions "(heap)")))

(defun parse-memory-regions (string)
  "Parses the memory regions from the /proc/id/maps file"
  (mapcar #'(lambda (x) (parse-integer x :radix 16)) (cl-ppcre:split "\-" (car (cl-ppcre:split "\\s+" string)))))

(defun get-memory-regions (&optional (pid *pid*) (parser #'parse-memory-regions) (read-if "([r\-][w\-][x\-]p)"))
  "Reads the /proc/id/maps file and returns all the memory addresses associated with the process"
  (with-open-file (stream (concatenate 'string "/proc/" (write-to-string pid) "/maps"))
    (loop for line = (read-line stream nil)
	  while line
	  if (cl-ppcre:scan read-if line) ; this is to make sure I'm reading the memory regions that are private and not shared
	  collect (funcall parser line))))

